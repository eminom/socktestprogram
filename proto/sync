#!/usr/local/bin/ruby

# Everything is fine.
# Autorhed by eminom(eminem)

require "fileutils"
require_relative "exconf"

def is_windows?
  RUBY_PLATFORM =~ /mswin|mingw/
end

def is_darwin?
	RUBY_PLATFORM =~ /darwin/
end

def proto_cmd
	if is_windows? then
		return "protoc.exe"
	elsif is_darwin? then
		return "protoc"
	end
	throw Exception.new("Unknonwn platform")
end

module ProtoSync
	def self.current_path
		File.dirname(__FILE__.encode("UTF-8"))
	end	

	def self.init
		@origin_path = ConfigEx.origin_path
		if not File.directory? @origin_path then
			print "Not expected for #{@origin_path}\n"
			exit
		end
	end

	def self.process
		Dir.glob("#{@origin_path}/**/*.proto") do |path|
			next if File.directory?(path)
			lpath = File.basename(path)
			print "Processing #{lpath} ... "
			lpath = lpath.chomp(File.extname(lpath)) + ".pb"
			target_path = "#{ProtoSync.current_path}/#{lpath}"
			cmd = "#{proto_cmd} "\
				"--proto_path=\"#{@origin_path}\" "\
				"-o #{target_path} #{path} "
			#puts cmd
			if not system cmd then
				print "Error compiling protocols:#{$?}\n"
				print "Command line: #{cmd}\n"
				exit
			end
			puts
		end
	end

	def self.test
		now_path = ProtoSync.current_path
		print "Testing under #{now_path}\n"
		Dir.glob("#{now_path}/**/*.proto") do |path|
			print "Inspecting #{path} ..."
			cmd = "#{proto_cmd} "\
				"--proto_path=\"#{now_path}\" "\
				"-o #{path}.pb #{path}"
			res = system cmd
			puts "executing result: #{res} : #{$?}"
		end
	end
end	

puts "Starting sync >>>"

# ProtoSync.test

ProtoSync.init
ProtoSync.process
puts "Finished"
puts

